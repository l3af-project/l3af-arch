# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'

cfg = YAML.load_file(File.join(
  File.dirname(File.expand_path(__FILE__)),
  "config.yaml"))['configs']

Vagrant.configure("2") do |config|
  config.vm.define "l3af" do |l3af|

    # Set boot timeout value
    l3af.vm.boot_timeout = 600

    l3af.vm.network "forwarded_port", guest: 8080, host: cfg['host_http_port1']
    l3af.vm.network "forwarded_port", guest: 8081, host: cfg['host_http_port2']
    l3af.vm.network "forwarded_port", guest: 3000, host: cfg['host_grafana_port']
    l3af.vm.network "forwarded_port", guest: 9090, host: cfg['host_prometheus_port']
    l3af.vm.network "forwarded_port", guest: 7080, host: cfg['host_l3af_config_port']
    l3af.vm.network "forwarded_port", guest: 8899, host: cfg['host_l3af_debug_port']

    l3af.vm.provider "virtualbox" do |vb|
      vb.memory = "2048"
    end

    l3af.vm.box = "ubuntu/focal64"
    if cfg['host_distro_codename'] == "jammy"
      config.vm.provision "shell", privileged: false, inline: <<-EOF
        echo "Vagrant Box jammy provisioned!"
        EOF
      l3af.vm.box = "ubuntu/jammy64"
    else
      # upgrading focal to v5.15 kernel as minimum version requirement for R2
      l3af.vm.provision "shell", inline: <<-SHELL
          wget https://raw.githubusercontent.com/pimlie/ubuntu-mainline-kernel.sh/master/ubuntu-mainline-kernel.sh
          chmod +x ubuntu-mainline-kernel.sh
          sudo mv ubuntu-mainline-kernel.sh /usr/local/bin/
          sudo ubuntu-mainline-kernel.sh -i 5.15.0
          apt --fix-broken -y install
      SHELL

        # restart after upgrade
        l3af.vm.provision :reload
    end

    if cfg['traffic_mirroring'] == "true"
      l3af.vm.network :private_network, ip: "192.168.10.40", :netmask => "255.255.255.0"
    end
    l3af.vm.hostname = "l3af-local-test.local"
    l3af.ssh.forward_agent = true

    l3af.vm.synced_folder cfg['host_l3afd_code_dir'], "/home/vagrant/code/l3afd"

    # Add Grafana apt repo
    l3af.vm.provision "shell", inline: <<-SHELL
      sudo apt-get install -y apt-transport-https
      sudo apt-get install -y software-properties-common wget
      wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
      echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
      sudo apt-get update
    SHELL

    # Install package dependencies
    l3af.vm.provision "shell", inline: <<-SHELL
      export DEBIAN_FRONTEND=noninteractive
      export TZ=Etc/UTC
      apt-get install -y bc \
        tzdata \
        bison \
        build-essential \
        clang \
        curl \
        exuberant-ctags \
        flex \
        gcc-9 \
        gcc-multilib \
        gnutls-bin \
        grafana \
        jq \
        libc6-dev \
        libcurl4-openssl-dev \
        libelf-dev \
        libjson-c-dev \
        libncurses5-dev \
        libpcap-dev \
        libssl-dev \
        linux-headers-generic \
        linux-tools-common \
        linux-tools-generic \
        llvm \
        net-tools \
        prometheus \
        rsync   \
        dwarves \
        zlib1g  \
        libelf1 \
	pkg-config \
	libbpf-dev \
	libzstd-dev
    SHELL

    # Install Opentelemetry collector
    if cfg['otel_collector'] == "true"
      l3af.vm.provision "shell", inline: <<-SHELL
        OTEL_VERSION="0.97.0"
        ARCH=$(uname -p)
        case $ARCH in
          arm)
            echo "Installing OTELC for arm"
            OTEL_ARCH=arm64
            ;;
          aarch64)
            echo "Installing OTELC for arm"
            OTEL_ARCH=arm64
            ;;
          x86_64)
            echo "Installing OTELC for amd64"
            OTEL_ARCH=amd64
            ;;
          i386)
            KERNEL=$(uname -m)
            if [ "$KERNEL" = "x86_64" ];
            then
              echo "Installing OTELC for amd64"
              OTEL_ARCH=amd64
            elif [ "$KERNEL" = "i386" ];
            then
              echo "Installing OTELC for i386"
              OTEL_ARCH=386
            else
              echo "The CPU kernel $KERNEL is not supported by the script"
              exit 1
            fi
            ;;
          *)
            echo "The CPU architecture $ARCH is not supported by the script"
            exit 1
            ;;
        esac
        OTEL_BINARY="otelcol_${OTEL_VERSION}_linux_${OTEL_ARCH}.tar.gz"
        OTEL_DIR="otelcol_${OTEL_VERSION}_linux_${OTEL_ARCH}"
        curl --proto '=https' --tlsv1.2 -fOL "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v${OTEL_VERSION}/${OTEL_BINARY}"
        tar -xvf ${OTEL_BINARY}
        sudo mv ${OTEL_DIR}/otelcol /usr/local/bin/otelcol
        sudo chmod +x /usr/local/bin/otelcol
        rm -rf ${OTEL_BINARY}
        echo "OTEL Collector version ${OTEL_VERSION} installed successfully."
      SHELL
    end

    # # Install latest golang version
    l3af.vm.provision "shell", inline: <<-SHELL
      # Get cpu architecture, arm or amd
      ARCH=$(uname -p)
      case $ARCH in
        arm)
          echo "Setting l3af dev environment for arm"
          arch=arm64
          ;;
        aarch64)
          echo "Setting l3af dev environment for arm"
          arch=arm64
          ;;
        x86_64)
          echo "Setting l3af dev environment for amd64"
          arch=amd64
          ;;
        i386)
          KERNEL=$(uname -m)
          if [ "$KERNEL" = "x86_64" ];
          then
            echo "Setting l3af dev environment for amd64"
            arch=amd64
          elif [ "$KERNEL" = "i386" ];
          then
            echo "Setting l3af dev environment for i386"
            arch=386
          else
            echo "The CPU kernel $KERNEL is not supported by the script"
            exit 1
          fi
          ;;
        *)
          echo "The CPU architecture $ARCH is not supported by the script"
          exit 1
          ;;
      esac

      os=`uname|tr '[:upper:]' '[:lower:]'`
      go_filename=`curl -s https://go.dev/dl/?mode=json|jq '.[0].files[].filename'|grep $os|grep $arch|egrep -v "arm|ppc"|tr -d '"'`
      wget https://go.dev/dl/$go_filename
      rm -rf /usr/local/go && tar -C /usr/local -xzf $go_filename && rm -f $go_filename
      echo export PATH=$PATH:/usr/local/go/bin >> /home/vagrant/.bashrc
      echo export PATH=$PATH:/usr/local/go/bin >> /home/vagrant/.profile
      echo export PATH=$PATH:/usr/local/go/bin >> /root/.bashrc
    SHELL

    # Reboot for updated kernel to load
    l3af.vm.provision :reload

    # Copy opentelemetry collector config and start opentelemetry collector
    if cfg['otel_collector'] == "true"
      l3af.vm.provision "shell", inline: <<-SHELL
        mkdir -p "/etc/otelcol/"
        cp /vagrant/cfg/otel-collector-config.yml /etc/otelcol/config.yml
        /usr/local/bin/otelcol --config=/etc/otelcol/config.yml &
      SHELL
    end

    l3af.vm.provision :shell, path: "provision.sh"

    # Always start test servers because they aren't managed services
    l3af.vm.provision :shell, path: "start_test_servers.sh", run: 'always'
    l3af.vm.provision "shell", inline: <<-SHELL
       mkdir -p /usr/local/l3afd/latest
       mkdir -p /usr/local/l3afd/v2.0.0/l3afd
       # for dev purposes I made simlink for v2.0.0 version to your local
       ln -s /home/vagrant/go/bin/l3afd /usr/local/l3afd/v2.0.0/l3afd/l3afd
       ln -s ./cfg/l3afd.cfg /usr/local/l3afd/v2.0.0/l3afd/l3afd.cfg
       ln -s /usr/local/l3afd/v2.0.0/l3afd/l3afd /usr/local/l3afd/latest/l3afd
       ln -s /usr/local/l3afd/v2.0.0/l3afd/l3afd.cfg /usr/local/l3afd/latest/l3afd.cfg
      SHELL
    end
    
   # Provision the GUE interface for traffic mirroring inside the l3af VM
    if cfg['traffic_mirroring'] == "true"
      l3af.vm.provision "shell", inline: <<-SHELL
        modprobe fou
        ip fou add port 6080 gue
        ip link add name gue1 type ipip remote 192.168.10.50 local 192.168.10.40 ttl 255 encap gue encap-sport 6080 encap-dport 6080 encap-csum encap-remcsum
        ip link set dev gue1 up
      SHELL
    end
  end

  # Provision traffic mirroring collector VM
  if cfg['traffic_mirroring'] == "true"
    config.vm.define "collector" do |collector|
      collector.vm.provider "virtualbox" do |vb|
        vb.memory = "512"
      end
      
      collector.vm.network "private_network", ip: "192.168.10.50", :netmask => "255.255.255.0"
      collector.vm.box = "ubuntu/focal64"
      collector.vm.provision "shell", inline: <<-SHELL
        modprobe fou
        ip fou add port 6080 gue
        ip link add name gue1 type ipip remote 192.168.10.40 local 192.168.10.50 ttl 225 encap gue encap-sport 6080 encap-dport 6080 encap-csum encap-remcsum
        ip link set dev gue1 up
      SHELL
    end
  end
